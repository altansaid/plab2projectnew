# Render Platform Specific Configuration
# This profile is optimized for Render.com deployment

# Server Configuration
server.port=${PORT:8080}

# PostgreSQL Database Configuration (Render provides these)
# DATABASE_URL is handled programmatically in ApplicationConfig.java
# to transform postgresql:// to jdbc:postgresql:// format
spring.datasource.driverClassName=org.postgresql.Driver
# Username and password are also handled in ApplicationConfig.java

# Connection Pool Settings for Render - keep under shared Postgres limits
# Many Render/Supabase plans cap client connections (e.g., ~15 via pooler). Keep this small to avoid
# hitting "FATAL: Max client connections reached" and to leave headroom for migrations/console.
# Ensure HikariCP is used as the datasource implementation
spring.datasource.type=com.zaxxer.hikari.HikariDataSource

# Keep pool small (3â€“5). 4 is a balanced default for web workloads
spring.datasource.hikari.maximum-pool-size=4

# Keep few idle connections so the external pooler isn't held by idles
spring.datasource.hikari.minimum-idle=1

# How long to wait for a connection from the pool before failing (ms)
spring.datasource.hikari.connection-timeout=20000

# Close idle connections quickly to free external pooler slots (ms)
spring.datasource.hikari.idle-timeout=120000

# Recycle connections periodically to avoid server/NAT timeouts (ms)
spring.datasource.hikari.max-lifetime=600000

# Log a stack trace if a connection is held longer than this (ms) to detect leaks
spring.datasource.hikari.leak-detection-threshold=60000

# Timeout for validating a connection (ms)
spring.datasource.hikari.validation-timeout=5000

# JPA/Hibernate Configuration
# Disable Open Session in View so requests don't hold DB connections past transaction scope
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# JWT Configuration
jwt.secret=${JWT_SECRET}
jwt.expiration=86400000

# CORS Configuration - Allow your frontend and common development URLs
cors.allowed-origins=${CORS_ALLOWED_ORIGINS}

# Google OAuth Configuration (Render Deployment)
google.oauth.enabled=${GOOGLE_OAUTH_ENABLED:true}
google.client.id=${GOOGLE_CLIENT_ID}
google.client.secret=${GOOGLE_CLIENT_SECRET}

# Security Settings
spring.h2.console.enabled=false
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=strict

# Actuator for health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always
management.health.db.enabled=true

# Production Logging
logging.level.root=WARN
logging.level.com.plabpractice.api=INFO
logging.level.org.springframework.web=WARN
logging.level.org.hibernate=ERROR
logging.level.org.springframework.messaging=WARN
logging.level.org.springframework.web.socket=WARN

# Disable unnecessary features for production
spring.jmx.enabled=false
spring.devtools.restart.enabled=false
spring.devtools.livereload.enabled=false

# JVM Performance Optimizations  
spring.main.lazy-initialization=false
spring.jpa.defer-datasource-initialization=false

# Database initialization
spring.sql.init.mode=always
spring.jpa.generate-ddl=true 

# File Upload Configuration (Render)
spring.servlet.multipart.max-file-size=${MAX_UPLOAD_FILE_SIZE:5MB}
spring.servlet.multipart.max-request-size=${MAX_UPLOAD_REQUEST_SIZE:5MB}
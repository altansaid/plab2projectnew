# Production Profile - Environment Variable Configuration
# Use this profile for production deployment
# Run with: ./gradlew bootRun --args='--spring.profiles.active=prod'

# PostgreSQL Database Configuration (from environment)
spring.datasource.url=${DATABASE_URL}
spring.datasource.driverClassName=${DATABASE_DRIVER:org.postgresql.Driver}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}

# Pool settings for production (keep low to avoid hitting DB max connections)
spring.datasource.hikari.maximum-pool-size=${DB_POOL_SIZE:5}
spring.datasource.hikari.minimum-idle=${DB_MIN_IDLE:1}
spring.datasource.hikari.connection-timeout=${DB_CONNECTION_TIMEOUT:20000}
spring.datasource.hikari.idle-timeout=${DB_IDLE_TIMEOUT:300000}

# JPA/Hibernate Configuration (Production)
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:validate}
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:false}
spring.jpa.properties.hibernate.dialect=${JPA_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
spring.jpa.open-in-view=false

# Flyway Configuration (Production)
spring.flyway.enabled=${FLYWAY_ENABLED:true}
spring.flyway.baseline-on-migrate=${FLYWAY_BASELINE_ON_MIGRATE:true}
spring.flyway.baseline-version=${FLYWAY_BASELINE_VERSION:0}
spring.flyway.baseline-description=${FLYWAY_BASELINE_DESCRIPTION:Existing database baseline}
spring.flyway.locations=${FLYWAY_LOCATIONS:classpath:db/migration}
spring.flyway.clean-disabled=${FLYWAY_CLEAN_DISABLED:true}
spring.flyway.out-of-order=${FLYWAY_OUT_OF_ORDER:true}
spring.flyway.ignore-missing-migrations=${FLYWAY_IGNORE_MISSING:true}

# JWT Configuration (from environment)
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION:86400000}

# CORS Configuration (from environment)
cors.allowed-origins=${CORS_ALLOWED_ORIGINS}

# Security Settings (Production)
spring.h2.console.enabled=false
server.servlet.session.cookie.secure=${COOKIE_SECURE:true}
server.servlet.session.cookie.http-only=${COOKIE_HTTP_ONLY:true}
server.servlet.session.cookie.same-site=${COOKIE_SAME_SITE:strict}

# Production Logging
logging.level.root=${LOG_LEVEL_ROOT:WARN}
logging.level.com.plabpractice.api=${LOG_LEVEL_APP:INFO}
logging.level.org.springframework.web=${LOG_LEVEL_WEB:WARN}
logging.level.org.hibernate=${LOG_LEVEL_HIBERNATE:ERROR}
logging.level.org.springframework.messaging=${LOG_LEVEL_MESSAGING:WARN}
logging.level.org.springframework.web.socket=${LOG_LEVEL_WEBSOCKET:WARN}

# Google OAuth Configuration (Production)
google.oauth.enabled=${GOOGLE_OAUTH_ENABLED:true}
google.client.id=${GOOGLE_CLIENT_ID}
google.client.secret=${GOOGLE_CLIENT_SECRET}

# File Upload Configuration (Production)
spring.servlet.multipart.max-file-size=${MAX_UPLOAD_FILE_SIZE:5MB}
spring.servlet.multipart.max-request-size=${MAX_UPLOAD_REQUEST_SIZE:5MB}

# Email/Resend Configuration
app.frontend.url=${APP_FRONTEND_URL:https://plab2practice.com}
# RESEND_API_KEY should be provided as env var (no default)
# Optionally set custom from and reply-to
APP_EMAIL_FROM=${APP_EMAIL_FROM:no-reply@plab2practice.com}
APP_EMAIL_REPLY_TO=${APP_EMAIL_REPLY_TO:}

# Auth reset token configuration (minutes)
auth.reset-token.minutes=${AUTH_RESET_TOKEN_MINUTES:15}

# SSL Configuration (Production)
server.ssl.enabled=${SSL_ENABLED:false}
server.ssl.key-store=${SSL_KEYSTORE:}
server.ssl.key-store-password=${SSL_KEYSTORE_PASSWORD:}
server.ssl.key-store-type=${SSL_KEYSTORE_TYPE:PKCS12} 